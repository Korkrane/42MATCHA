{
  "swagger": "2.0",
  "info": {
    "title": "User API",
    "description": "An API for managing users in a database",
    "version": "1.0.0"
  },
  "paths": {
    "/conversations": {
      "post": {
        "tags": ["conversations"],
        "summary": "Create a new conversation",
        "description": "Create a conv after 2 user matched",
        "parameters": [
          {
            "name": "userId1",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userId2",
            "in": "formData",
            "required": true,
            "type": "integer"
          }],
        "responses": {
          "200": {
            "description": "Successfully createad a conversation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Conversations"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve conversation from the database"
          }
        }
      }
    },
    "/conversations/{id}": {
      "delete": {
        "tags": ["conversations"],
        "summary": "Delete a conversation",
        "description": "Delete a conversation and all the messages linked to it",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }],
        "responses": {
          "200": {
            "description": "Successfully deleted the conversation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Conversations"
              }
            }
          },
          "500": {
            "description": "Failed to delete conversation from the database"
          }
        }
      }
    },
    "/conversations/{userId}": {
      "get": {
        "tags": ["conversations"],
        "summary": "Get all conversation of a user",
        "description": "Get all the conversations",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer"
          }],
        "responses": {
          "200": {
            "description": "Successfully gotten the conversations",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Conversations"
              }
            }
          },
          "500": {
            "description": "Failed to get conversations from the database"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Get all users",
        "description": "Get all users from the database",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve users from the database"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Insert new user",
        "description": "Insert a new user into the database",
        "parameters": [
          {
            "name": "firstName",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully inserted user into the database"
          },
          "500": {
            "description": "Failed to insert user into the database"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "login the user",
        "description": "login the user",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in"
          },
          "500": {
            "description": "Failed to log in"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a user by his id",
        "description": "Get a user by their ID from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Failed to find user with the specified ID"
          },
          "500": {
            "description": "Failed to retrieve user from the database"
          }
        }
      }
    },
    "/users/{id}/bachelors/": {

      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get bachelors for user and paginate them",
        "description": "Get bachelors for the user with id = ID from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved bachelors",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "404": {
            "description": "Failed to find bachelors with the specified ID"
          },
          "500": {
            "description": "Failed to retrieve bachelors from the database"
          }
        }
      }
    },
    "/users/{id}/filteredBachelors": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Get bachelors for user and paginate them",
        "description": "Get bachelors for the user with id = ID from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "min_distance",
            "in": "formData",
            "required": true,
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "max_distance",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "min_age",
            "in": "formData",
            "required": true,
            "type": "integer",
            "minimum": 18
          },
          {
            "name": "max_age",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "min_fame",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "min_common_interests",
            "in": "formData",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved bachelors",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "404": {
            "description": "Failed to find bachelors with the specified ID"
          },
          "500": {
            "description": "Failed to retrieve bachelors from the database"
          }
        }
      }
    },
    "/users/{id}/profile/{visit_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user without sensitive data",
        "description": "Get a user by their ID from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "visit_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user without sensitive data",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Failed to find user with the specified ID"
          },
          "500": {
            "description": "Failed to retrieve user from the database"
          }
        }
      }
    },
    "/users/{id}/liked": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a list of liked users by logged in user",
        "description": "Get a list of liked users from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully gotten list of liked users",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Failed to get list of users blocked with the specified ID"
          },
          "500": {
            "description": "Failed to get list of users liked from the database"
          }
        }
      }
    },
    "/users/{id}/matched": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a list of matched users by logged in user",
        "description": "Get a list of matched users from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully gotten list of matched users",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Failed to get list of users matched with the specified ID"
          },
          "500": {
            "description": "Failed to get list of users matched from the database"
          }
        }
      }
    },
    "/users/{id}/blocked": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a list of blocked users by logged in user",
        "description": "Get a list of blocked users from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved gotten list of blocked users",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Failed to get list of users blocked"
          },
          "500": {
            "description": "Failed to get list of users blocked from the database"
          }
        }
      }
    },
    "/users/{id}/update": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update anything in a user",
        "description": "Update user from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "int"
          },
          {
            "name": "first_name",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "last_name",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "age",
            "in": "formData",
            "type": "integer"
          },
          {
            "name": "sex_orientation",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "city",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "country",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "interests",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "bio",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "active",
            "in": "formData",
            "type": "boolean"
          },
          {
            "name": "fame_rating",
            "in": "formData",
            "type": "integer"
          },
          {
            "name": "report_count",
            "in": "formData",
            "type": "integer"
          },
          {
            "name": "photos_path",
            "in": "formData",
            "schema": {
              "type": "array",
              "items": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Failed to find user with the specified ID"
          },
          "500": {
            "description": "Failed to update user from the database"
          }
        }
      }
    },
    "/relations": {
      "get": {
        "tags": ["relations"],
        "summary": "Get all relations",
        "description": "Get all relations from the database",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all relations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Relations"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve relations from the database"
          }
        }
      },
      "post": {
        "tags": [
          "relations"
        ],
        "summary": "Insert new relation",
        "description": "Insert a new relation into the database",
        "parameters": [
        {
          "name": "sender_id",
          "in": "formData",
          "required": true,
          "type": "integer"
        },
        {
          "name": "receiver_id",
          "in": "formData",
          "required": true,
          "type": "integer"
        },
        {
          "name": "type",
          "in": "formData",
          "required": true,
          "type": "string"
        }
        ],
        "responses": {
          "201": {
            "description": "Successfully inserted user into the database"
          },
          "500": {
            "description": "Failed to insert user into the database"
          }
        }
      },
      "delete": {
        "tags": ["relations"],
        "summary": "Delete a relation",
        "description": "Delete a relation",
        "parameters": [
          {
            "name": "sender_id",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "receiver_id",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "type",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the relation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Relations"
              }
            }
          },
          "500": {
            "description": "Failed to delete relation from the database"
          }
        }
      }
    },
    "/relations/{sender_id}": {
      "get": {
        "tags": ["relations"],
        "summary": "Get all blocked by sender_id",
        "description": "Get all blocked by sender_id from the database",
        "parameters": [
        {
          "name": "sender_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all blocked by sender_id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Relations"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve relations from the database"
          }
        }
      }
    },
    "/relations/type/{sender_id}/{receiver_id}": {
      "get": {
        "tags": ["relations"],
        "summary": "Get relation type between from sender_id to receiver_id",
        "description": "Get type of relation from sender_id to receiver_id from the database",
        "parameters": [
          {
          "name": "sender_id",
          "in": "path",
          "required": true,
          "type": "integer"
          },
          {"name": "receiver_id",
          "in": "path",
          "required": true,
          "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved type of relation from sender_id to receiver_id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Relations"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve type of relation from sender_id to receiver_id"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "Get all notifications",
        "description": "Get all notifications from the database",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all notifications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notifications"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve notifications from the database"
          }
        }
      },
      "post": {
        "tags": [
          "notifications"
        ],
        "summary": "Insert a new notification",
        "description": "Create notification in the database",
        "parameters": [
          {
            "name": "sender_id",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "receiver_id",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "type",
            "in": "formData",
            "required": true,
            "type": "string"
          }],
        "responses": {
          "200": {
            "description": "Successfully created the notification",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Blocks"
              }
            }
          },
          "500": {
            "description": "Failed to create the notification in the database"
          }
        }
      }
    },
    "/notifications/{id}": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "get notifications of user",
        "description": "get notifications of user",
        "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }],
        "responses": {
          "200": {
            "description": "Successfully gotten all the notif of user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notifications"
              }
            }
          },
          "500": {
            "description": "Failed to get the notifs of user_id from the database"
          }
        }
      },
      "delete": {
        "tags": [
          "notifications"
        ],
        "summary": "Delete a notification by it's id",
        "description": "delete notif the database",
        "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }],
        "responses": {
          "200": {
            "description": "Successfully deleted the notif",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notifications"
              }
            }
          },
          "500": {
            "description": "Failed to delete the notif from the database"
          }
        }
      }
    },
    "/notifications/{id}/receiver": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "Get all notification of a user",
        "description": "Get notifications where id is receiver",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved notifications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notifications"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve notifications from the database"
          }
        }
      }
    },
    "/notifications/{id}/update_read": {
      "put": {
        "tags": [
          "notifications"
        ],
        "summary": "Set a notification as read",
        "description": "Update notification id's read status in the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }],
        "responses": {
          "200": {
            "description": "Successfully updated the update_at of the notification",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notifications"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve notifications from the database"
          }
        }
      }
    },
    "/messages": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "send a message to a user",
        "description": "Create message in the database",
        "parameters": [
          {
            "name": "sender_id",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "receiver_id",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "message",
            "in": "formData",
            "required": true,
            "type": "string"
          }],
        "responses": {
          "200": {
            "description": "Successfully created message",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Messages"
              }
            }
          },
          "500": {
            "description": "Failed to create message in the database"
          }
        }
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "summary": "delete a conversation",
        "description": "Delete conversation",
        "parameters": [
          {
            "name": "userId1",
            "in": "formData",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userId2",
            "in": "formData",
            "required": true,
            "type": "integer"
          }],
        "responses": {
          "200": {
            "description": "Successfully deleted the conversation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Blocks"
              }
            }
          },
          "500": {
            "description": "Failed to delete the conversation"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "age": {
          "type": "integer"
        },
        "sex": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "birthdate": {
          "type": "string"
        },
        "interests": {
          "type": "string"
        },
        "photos": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        }
      }
    },
    "Notifications": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "sender_id": {
          "type": "integer"
        },
        "receiver_id": {
          "type": "integer"
        },
        "type": {
          "type": "integer"
        },
        "read": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Relations": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique identifier for the conversation"
        },
        "sender_id": {
          "type": "integer",
          "description": "The id of the user who sent the first message in the conversation"
        },
        "receiver_id": {
          "type": "integer",
          "description": "The id of the user who received the first message in the conversation"
        },
        "type": {
          "type": "string",
          "description": "The string that tells the relationship type, can be block, like or match"
        }
      }
    },
    "Messages": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "sender_id": {
          "type": "integer"
        },
        "receiver_id": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Conversations": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique identifier for the conversation"
        },
        "sender_id": {
          "type": "integer",
          "description": "The id of the user who sent the first message in the conversation"
        },
        "receiver_id": {
          "type": "integer",
          "description": "The id of the user who received the first message in the conversation"
        },
        "message_history": {
          "type": "array",
          "description": "An array of message ids from the messages table, representing the message history for this conversation",
          "items": {
            "type": "integer"
          }
        }
      }
    }
  }
}